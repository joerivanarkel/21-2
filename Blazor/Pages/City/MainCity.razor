@page "/city"

<PageTitle>City Table</PageTitle>

@using Blazor.Data
@using Data.Models
@inject ICityServiceUI CityServiceUI
@inject NavigationManager NavManager

<h1>City Table</h1>
<RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click=@(() =>
    NavManager.NavigateTo("/createcity")) Text="Create New" />

@if (cities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid Data="@cities" TItem="City" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
        <Columns>
            <RadzenDataGridColumn TItem="City" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="City" Property="Population" Title="Population" />

            <RadzenDataGridColumn TItem="City" Width="160px" Title="Edit" Sortable="false" Filterable="false">
                <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Warning" Class="m-1" Click=@(() =>
                    NavManager.NavigateTo("/updatecity?id=@City.Id")) Text="Edit" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="City" Width="160px" Title="Delete" Sortable="false" Filterable="false">
                <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Class="m-1" Click=@(args => Delete(args)) Text="Delete" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

}

@code {
    private IEnumerable<City>? cities;

    private void Delete(object a)
    {
        //CityServiceUI.DeleteAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        cities = await CityServiceUI.GetCitiesAsync();
    }
}
